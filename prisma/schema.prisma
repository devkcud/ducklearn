generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "sqlite"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id                String     @id @unique
  username          String     @unique
  displayName       String
  about             String     @default("")
  userLinks         UserLink[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  stars             Int        @default(0)
  profileVisibility String     @default("public")

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  badges BadgeOnUser[]

  Session Session[]
  Key     Key[]

  @@map("users")
}

model UserLink {
  id   String @id @default(cuid())
  name String
  url  String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Badge {
  id    String        @id @unique @default(cuid())
  name  String
  users BadgeOnUser[]
}

model BadgeOnUser {
  userId  String
  badgeId String
  user    User   @relation(fields: [userId], references: [id])
  badge   Badge  @relation(fields: [badgeId], references: [id])

  @@id([userId, badgeId])
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
